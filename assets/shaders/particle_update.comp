#version 450

layout (set = 0, binding = 0) uniform GlobalUBO {
    float deltaTime;
} ubo;

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
    float lifetime;
};
layout(std140, set = 1, binding = 0) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};
layout(std140, set = 1, binding = 1) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};
#define POINT 0
#define LINE 1
#define RING 2
#define RECT 3
struct EmitData {
    uint count;
    uint type;
    
    vec2 position;
    float data0;
    float data1;

    float speed_min;
    float speed_max;

    float lifetime_min;
    float lifetime_max;

    float angle_min;
    float angle_max;

    vec4 color;
};
layout(set = 2, binding = 0) uniform EmitUniform {
    EmitData emit_calls[16];
    uint call_count;
    uint work_start;
    uint work_end;
    uint max_particles; // pad to 16 bytes
} emit;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

highp float rand(vec2 co)
{
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

void processPhysics(uint index) {
    Particle particleIn = particlesIn[index];

    particlesOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;
    particlesOut[index].lifetime = particleIn.lifetime - ubo.deltaTime;
    particlesOut[index].color = particleIn.color;
    if(particleIn.lifetime - ubo.deltaTime < 0) {
        particlesOut[index].color = vec4(0, 0, 0, 0);
    }
}
void handleType(uint particleIdx, uint emitIdx, float randomx, float randomy) {
    uint type = emit.emit_calls[emitIdx].type;
    float data0 = emit.emit_calls[emitIdx].data0;
    float data1 = emit.emit_calls[emitIdx].data1;
    vec2 pos = emit.emit_calls[emitIdx].position;
    switch(type) {
        case POINT:
        break;
        case LINE:
            particlesOut[particleIdx].position = pos + (vec2(data0, data1) * randomx);
        break;
        case RING:
            // particlesOut[particleIdx].position = pos + (vec2(data0, data1) * random);
        break;
        case RECT:
            {
                float x = data0 * randomx;
                float y = data1 * randomy;
                particlesOut[particleIdx].position = pos + vec2(x, y);
            }
        break;
    }
}
void initParticle(uint particleIdx, uint emitIdx) {
    float speed_min = emit.emit_calls[emitIdx].speed_min;
    float speed_max = emit.emit_calls[emitIdx].speed_max;
    float angle_min = emit.emit_calls[emitIdx].angle_min;
    float angle_max = emit.emit_calls[emitIdx].angle_max;
    float life_min = emit.emit_calls[emitIdx].lifetime_min;
    float life_max = emit.emit_calls[emitIdx].lifetime_max;

    vec2 seedx = vec2(particleIdx, particleIdx * 13 - emitIdx);
    vec2 seedy = vec2(particleIdx * 17 - emitIdx * 9, particleIdx * 5 - emitIdx);

    float speed = speed_min + (speed_max - speed_min) * rand(seedx + seedy + vec2(speed_max, speed_min));
    float angle = angle_min + (angle_max - angle_min) * rand(seedx - seedy + vec2(angle_max, angle_min));
    vec2 dir = vec2(cos(angle), sin(angle));

    particlesOut[particleIdx].velocity = dir * speed;
    particlesOut[particleIdx].position = emit.emit_calls[emitIdx].position;

    float life = life_min + (life_max - life_min) * rand(seedx - seedy + vec2(life_max * 100.f, life_min * 100.f));
    particlesOut[particleIdx].lifetime = life;
    particlesOut[particleIdx].color = emit.emit_calls[emitIdx].color;

    handleType(particleIdx, emitIdx, rand(-seedx + seedy), rand(-seedx - seedy));
}
void emitParticle(uint index) {
    uint cur_start = emit.work_start;
    for(uint i = 0; i < emit.call_count; i++) {
        uint cur_end = cur_start + emit.emit_calls[i].count;
        uint upper_limit = cur_end;
        uint lower_limit = cur_start;
        while(upper_limit > emit.max_particles) {
            upper_limit -= emit.max_particles;
            lower_limit -= emit.max_particles;
        }
        if(index >= lower_limit && index < upper_limit) {
            initParticle(index, i);
            return;
        }
        cur_start = cur_end;
    }
}

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    uint upper_limit = emit.work_end;
    uint lower_limit = emit.work_start;
    while(upper_limit > emit.max_particles) {
        upper_limit -= emit.max_particles;
        lower_limit -= emit.max_particles;
    }
    if(emit.call_count == 0 || index < lower_limit  || index >= upper_limit) {
        processPhysics(index);
    }else {
        emitParticle(index);
    }
}

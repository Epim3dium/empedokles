#version 450

layout (set = 0, binding = 0) uniform GlobalUBO {
    float deltaTime;
} ubo;

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
    float lifetime;
};

layout(std140, set = 1, binding = 0) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, set = 1, binding = 1) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];

    particlesOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;
    particlesOut[index].lifetime = particleIn.lifetime - ubo.deltaTime;
    if(particleIn.lifetime - ubo.deltaTime < 0) {
        particlesOut[index].color = vec4(0, 0, 0, 0);
    }
}

#version 450
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0) buffer DataBuffer {
    float data[];
};
layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

vec4 scientificColorMap(float value) {
    // Clamp the input to the 0.0 - 1.0 range to avoid out-of-bounds values
    value = clamp(value, 0.0, 1.0);
    
    // Define the colors at key points along the 0-1 range
    vec4 colorA = vec4(0.0, 0.0, 0.3, 1);  // Dark blue at 0.0
    colorA = vec4(0.0, 0.0, 0.05, 1);  // Dark blue at 0.0
    vec4 colorB = vec4(0.0, 0.7, 0.4, 1);  // Green at around 0.4
    vec4 colorC = vec4(0.9, 0.9, 0.0, 1);  // Yellow at around 0.7
    vec4 colorD = vec4(1.0, 1.0, 1.0, 1);  // White at 1.0

    // Blend colors based on the input value
    if (value < 0.4) {
        return mix(colorA, colorB, value / 0.4);
    } else if (value < 0.7) {
        return mix(colorB, colorC, (value - 0.4) / 0.3);
    } else {
        return mix(colorC, colorD, (value - 0.7) / 0.3);
    }
}
void main() {
    if(gl_GlobalInvocationID.x > 255) {
        return;
    }
    if(gl_GlobalInvocationID.y > 255) {
        return;
    }
    if(gl_GlobalInvocationID.y == 0) {
        return;
    }
    if(gl_GlobalInvocationID.x == 0) {
        return;
    }
    uint index = gl_GlobalInvocationID.x+ gl_GlobalInvocationID.y * 256;
    uint up = gl_GlobalInvocationID.x+ (gl_GlobalInvocationID.y + 1) * 256;
    uint down = gl_GlobalInvocationID.x+ (gl_GlobalInvocationID.y - 1) * 256;
    uint left = gl_GlobalInvocationID.x - 1+ gl_GlobalInvocationID.y * 256;
    uint right = gl_GlobalInvocationID.x + 1+ gl_GlobalInvocationID.y * 256;
    data[index] = (data[index] + data[up] + data[down] + data[left] + data[right]) / 5.f * 0.999f;

    vec4 color_sci = scientificColorMap(data[index]);
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), color_sci);
}
